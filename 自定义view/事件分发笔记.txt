
自定义view几种构造方法的说明
1、一个参数的构造方法，只能在代码里面 new CustomView(this）来创建自定义view
2、二个参数的构造方法，可以在布局的xml文件里面写自定义view
3、三个参数的构造方法，不仅可以在布局的xml文件里面写自定义view，还可以在xml标签中引用自己创建的
属性（前提是要创建attr.xml，然后在引入自己的命名空间）
4、四个参数的构造方法

Window ，PhoneWidow，DecorView

事件分发：dispatchTouchEvent
事件拦截：onInterceptTouchEvent
事件消费：onTouchEvent

三个方法均有一个 boolean(布尔) 类型的返回值，通过返回true和false来控制事件传递的流程

Activity 和 View 都是没有事件拦截的，ViewGroup三个方法都有

因为：Activity 作为原始的事件分发者，如果 Activity 拦截了事件会导致整个屏幕都无法响应事件。

View最为事件传递的最末端，要么消费掉事件，要么不处理进行回传，根本没必要进行事件拦截。


为什么 View 会有 dispatchTouchEvent ?

因为: 我们知道 View 可以注册很多事件监听器，例如：单击事件(onClick)、长按事件(onLongClick)、触摸事件(onTouch)，
并且View自身也有 onTouchEvent 方法，那么问题来了，这么多与事件相关的方法应该由谁管理？
毋庸置疑就是 dispatchTouchEvent，所以 View 也会有事件分发。

事件分发流程：

事件收集之后最先传递给 Activity，然后依次向下传递，大致如下：

Activity －> PhoneWindow －> DecorView －> ViewGroup －> ...－> View

如果没有任何View消费掉事件，那么这个事件会按照反方向回传，最终传回给Activity，如果最后 Activity 也没有处理，本次事件才会被抛弃:

Activity <－ PhoneWindow <－ DecorView <－ ViewGroup <－ ... <－ View

责任链模式：如果我能处理就拦截下来自己干，如果自己不能处理或者不确定就交给责任链中下一个对象。


ViewGroup 的事件分发机制伪代码如下：

public boolean dispatchTouchEvent(MotionEvent ev) {
    boolean result = false;             // 默认状态为没有消费过

    if (!onInterceptTouchEvent(ev)) {   // 如果没有拦截交给子View
        result = child.dispatchTouchEvent(ev);
    }

    if (!result) {                      // 如果事件没有被消费,询问自身onTouchEvent
        result = onTouchEvent(ev);
    }

    return result;
}

几条原则：
1.如果事件被消费，就意味着事件信息传递终止。
2.如果事件一直没有被消费，最后会传给Activity，如果Activity也不需要就被抛弃。
3.判断事件是否被消费是根据返回值，而不是根据你是否使用了事件。

一句话总结：责任链模式，事件层层传递，直到被消费。

事件的调度顺序应该是 onTouchListener > onTouchEvent > onLongClickListener > onClickListener

事件调度伪代码如下：

public boolean dispatchTouchEvent(MotionEvent event) {
  if (mOnTouchListener.onTouch(this, event)) {
      return true;
  } else if (onTouchEvent(event)) {
      return true;
  }
  return false;
}

View 的事件分发：

1. 不论 View 自身是否注册点击事件，只要 View 是可点击的就会消费事件。

2. 事件是否被消费由返回值决定，true 表示消费，false 表示不消费，与是否使用了事件无关。

问：ViewGroup 和 ChildView 同时注册了事件监听器(onClick等)，哪个会执行?

答：事件优先给 ChildView，会被 ChildView消费掉，ViewGroup 不会响应。

所有事件都应该被同一 View 消费

例如：View 中 onClick 事件需要同时接收到 ACTION_DOWN 和 ACTION_UP 才能触发，如果分配给了不同的 View，那么 onClick 将无法被正确触发


核心要点

1、事件分发原理: 责任链模式，事件层层传递，直到被消费。
2、View 的 dispatchTouchEvent 主要用于调度自身的监听器和 onTouchEvent。
3、View的事件的调度顺序是 onTouchListener > onTouchEvent > onLongClickListener > onClickListener 。
4、不论 View 自身是否注册点击事件，只要 View 是可点击的就会消费事件。
5、事件是否被消费由返回值决定，true 表示消费，false 表示不消费，与是否使用了事件无关。
6、ViewGroup 中可能有多个 ChildView 时，将事件分配给包含点击位置的 ChildView。
7、ViewGroup 和 ChildView 同时注册了事件监听器(onClick等)，由 ChildView 消费。
8、一次触摸流程中产生事件应被同一 View 消费，全部接收或者全部拒绝。
9、只要接受 ACTION_DOWN 就意味着接受所有的事件，拒绝 ACTION_DOWN 则不会收到后续内容。
10、如果当前正在处理的事件被上层 View 拦截，会收到一个 ACTION_CANCEL，后续事件不会再传递过来。

Android 将所有的输入事件都放在了 MotionEvent
getAction()	获取事件类型。
getX()	获得触摸点在当前 View 的 X 轴坐标。
getY()	获得触摸点在当前 View 的 Y 轴坐标。
getRawX()	获得触摸点在整个屏幕的 X 轴坐标。
getRawY()	获得触摸点在整个屏幕的 Y 轴坐标。